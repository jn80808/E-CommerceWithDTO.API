// <auto-generated />
using System;
using ECommerceSystem;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_CommerceWithDTO.API.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20250205091425_Initial_Migration")]
    partial class Initial_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Devices and gadgets",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Printed and digital books",
                            Name = "Books"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Apparel and accessories",
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Kitchen and home utilities",
                            Name = "Home Appliances"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Toys and games for kids",
                            Name = "Toys"
                        });
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerName = "Alice Johnson",
                            OrderDate = new DateTime(2025, 1, 21, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5073)
                        },
                        new
                        {
                            Id = 2,
                            CustomerName = "Bob Smith",
                            OrderDate = new DateTime(2025, 1, 23, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5093)
                        },
                        new
                        {
                            Id = 3,
                            CustomerName = "Charlie Davis",
                            OrderDate = new DateTime(2025, 1, 26, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5095)
                        },
                        new
                        {
                            Id = 4,
                            CustomerName = "David Wilson",
                            OrderDate = new DateTime(2025, 1, 27, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5097)
                        },
                        new
                        {
                            Id = 5,
                            CustomerName = "Eva Roberts",
                            OrderDate = new DateTime(2025, 1, 29, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5098)
                        },
                        new
                        {
                            Id = 6,
                            CustomerName = "Fay Green",
                            OrderDate = new DateTime(2025, 1, 31, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5100)
                        },
                        new
                        {
                            Id = 7,
                            CustomerName = "George Turner",
                            OrderDate = new DateTime(2025, 2, 2, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5101)
                        },
                        new
                        {
                            Id = 8,
                            CustomerName = "Helen Adams",
                            OrderDate = new DateTime(2025, 2, 3, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5103)
                        },
                        new
                        {
                            Id = 9,
                            CustomerName = "Ivy Lee",
                            OrderDate = new DateTime(2025, 2, 4, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5104)
                        },
                        new
                        {
                            Id = 10,
                            CustomerName = "James Clark",
                            OrderDate = new DateTime(2025, 2, 5, 17, 14, 25, 284, DateTimeKind.Local).AddTicks(5105)
                        });
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 699.99m
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 3,
                            Quantity = 2,
                            UnitPrice = 19.99m
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 1,
                            UnitPrice = 1299.99m
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 2,
                            ProductId = 4,
                            Quantity = 3,
                            UnitPrice = 15.99m
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 3,
                            ProductId = 5,
                            Quantity = 1,
                            UnitPrice = 89.99m
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 4,
                            ProductId = 1,
                            Quantity = 1,
                            UnitPrice = 699.99m
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 5,
                            ProductId = 2,
                            Quantity = 2,
                            UnitPrice = 1299.99m
                        },
                        new
                        {
                            Id = 8,
                            OrderId = 6,
                            ProductId = 4,
                            Quantity = 4,
                            UnitPrice = 15.99m
                        },
                        new
                        {
                            Id = 9,
                            OrderId = 7,
                            ProductId = 3,
                            Quantity = 5,
                            UnitPrice = 19.99m
                        },
                        new
                        {
                            Id = 10,
                            OrderId = 8,
                            ProductId = 5,
                            Quantity = 3,
                            UnitPrice = 89.99m
                        });
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Latest model smartphone",
                            Name = "Smartphone",
                            Price = 699.99m,
                            StockQuantity = 50
                        },
                        new
                        {
                            Id = 2,
                            Description = "High performance laptop",
                            Name = "Laptop",
                            Price = 1299.99m,
                            StockQuantity = 30
                        },
                        new
                        {
                            Id = 3,
                            Description = "Bestselling fiction novel",
                            Name = "Fiction Novel",
                            Price = 19.99m,
                            StockQuantity = 100
                        },
                        new
                        {
                            Id = 4,
                            Description = "100% cotton t-shirt",
                            Name = "T-Shirt",
                            Price = 15.99m,
                            StockQuantity = 200
                        },
                        new
                        {
                            Id = 5,
                            Description = "High-speed kitchen blender",
                            Name = "Blender",
                            Price = 89.99m,
                            StockQuantity = 40
                        });
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 4
                        });
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.OrderItem", b =>
                {
                    b.HasOne("E_Commerce.API.Models.Domain.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.API.Models.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.ProductCategory", b =>
                {
                    b.HasOne("E_Commerce.API.Models.Domain.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Commerce.API.Models.Domain.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("E_Commerce.API.Models.Domain.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
